name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test import and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            # Test if the script can be imported without errors
            exec(open('dayz_item_scraper.py').read())
            print('✅ Script imports successfully')
        except Exception as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "
    
    - name: Test script help and version
      run: |
        python dayz_item_scraper.py --help || echo "Help command test completed"
    
    - name: Run basic scraper test (dry run)
      run: |
        # Create a minimal test that doesn't actually download
        python -c "
        import requests
        from bs4 import BeautifulSoup
        import sys
        
        # Test basic connectivity to DayZ wiki
        try:
            response = requests.get('https://dayz.fandom.com/wiki/Category:Weapons', timeout=10)
            if response.status_code == 200:
                print('✅ Can connect to DayZ wiki')
                soup = BeautifulSoup(response.content, 'html.parser')
                if soup.find('div', class_='category-page__members'):
                    print('✅ Can parse category pages')
                else:
                    print('⚠️ Category structure may have changed')
            else:
                print(f'⚠️ Wiki returned status code: {response.status_code}')
        except Exception as e:
            print(f'⚠️ Connection test failed: {e}')
            print('This may be due to network restrictions in CI environment')
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy bandit safety
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Type checking with mypy
      run: |
        mypy dayz_item_scraper.py --ignore-missing-imports || echo "Type checking completed with warnings"
    
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Security scan completed"
    
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check || echo "Dependency security check completed"

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Check README links
      run: |
        # Check if README.md exists and has basic structure
        if [ -f README.md ]; then
          echo "✅ README.md exists"
          if grep -q "# DayZ Item Scraper" README.md; then
            echo "✅ README has proper title"
          else
            echo "❌ README missing proper title"
            exit 1
          fi
        else
          echo "❌ README.md missing"
          exit 1
        fi
    
    - name: Check required files
      run: |
        required_files="requirements.txt LICENSE .gitignore CONTRIBUTING.md"
        for file in $required_files; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler
    
    - name: Memory usage test
      run: |
        python -c "
        import sys
        import tracemalloc
        
        # Start memory tracking
        tracemalloc.start()
        
        # Import the script (this loads all functions into memory)
        exec(open('dayz_item_scraper.py').read())
        
        # Get memory usage
        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()
        
        print(f'Current memory usage: {current / 1024 / 1024:.2f} MB')
        print(f'Peak memory usage: {peak / 1024 / 1024:.2f} MB')
        
        # Fail if memory usage is excessive (>100MB for basic import)
        if peak > 100 * 1024 * 1024:
            print('❌ Memory usage too high')
            sys.exit(1)
        else:
            print('✅ Memory usage acceptable')
        "

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.10']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test script import on ${{ matrix.os }}
      run: |
        python -c "
        try:
            exec(open('dayz_item_scraper.py').read())
            print('✅ Script compatible with ${{ matrix.os }}')
        except Exception as e:
            print(f'❌ Compatibility issue on ${{ matrix.os }}: {e}')
            import sys
            sys.exit(1)
        "

  release:
    needs: [test, code-quality, documentation, performance, compatibility]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Check if version changed
      id: version_check
      run: |
        # Extract version from script
        VERSION=$(python -c "
        with open('dayz_item_scraper.py', 'r') as f:
            content = f.read()
            import re
            match = re.search(r'__version__\s*=\s*[\"\']([\d\.]+)[\"\']', content)
            if match:
                print(match.group(1))
            else:
                print('1.0.0')
        ")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version found: $VERSION"
    
    - name: Create Release
      if: steps.version_check.outputs.version
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version_check.outputs.version }}
        release_name: Release v${{ steps.version_check.outputs.version }}
        body: |
          ## Changes in this Release
          
          - Automated release from main branch
          - All tests passed
          - Code quality checks passed
          - Cross-platform compatibility verified
          
          ## Download
          
          Download the `dayz_item_scraper.py` file and follow the README instructions.
          
          ## Installation
          
          ```bash
          pip install -r requirements.txt
          python dayz_item_scraper.py
          ```
        draft: false
        prerelease: false
